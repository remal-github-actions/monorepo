import static build.GitHubActionsEnvVars.GITHUB_ACTIONS_ENV_VARS
import static build.GitHubActionsEnvVars.GITHUB_ACTIONS_ENV_VARS_DOC_LOCATION

import java.nio.file.Path

plugins {
    id 'java-library'
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
    implementation 'org.hibernate.validator:hibernate-validator'
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

TaskProvider generateEnvironmentClass = tasks.register('generateEnvironmentClass') { Task task ->
    File outputDir = project.file("${project.buildDir}/generated/sources/${task.name}")
    task.outputs.dir(outputDir).withPropertyName('outputDir')
    project.sourceSets.main.java.srcDir(outputDir)

    task.doFirst {
        outputDir.deleteDir()
        outputDir.mkdirs()
    }

    task.doLast {
        String packageName = 'name.remal.github_actions.utils'
        String classSimpleName = 'Environment'
        File outputFile = project.file("${outputDir}/${packageName.replace('.', '/')}/${classSimpleName}.java")
        outputFile.parentFile.mkdirs()
        outputFile.setText(
            (
                [
                    "package ${packageName};",
                    "",
                    "import static java.util.function.Function.identity;",
                    "import static java.util.function.Predicate.not;",
                    "import static lombok.AccessLevel.PRIVATE;",
                    "",
                    "import java.nio.file.Paths;",
                    "import java.net.URL;",
                    "import java.util.Optional;",
                    "import java.util.function.Function;",
                    "import javax.annotation.Nullable;",
                    "import javax.annotation.processing.Generated;",
                    "import lombok.NoArgsConstructor;",
                    "import lombok.SneakyThrows;",
                    "",
                    "/**",
                    " * See <a href=\"$GITHUB_ACTIONS_ENV_VARS_DOC_LOCATION\">$GITHUB_ACTIONS_ENV_VARS_DOC_LOCATION</a>.",
                    " */",
                    "@NoArgsConstructor(access = PRIVATE)",
                    "@Generated(\"${rootProject.relativePath(project.buildFile).replace('\\', '/')}\")",
                    "public abstract class ${classSimpleName} {",
                    "",
                    "    private static <T> T getEnv(String var, Function<String, T> converter, boolean optional, @Nullable T defaultValue) {",
                    "        return Optional.ofNullable(System.getenv(var))",
                    "            .filter(not(String::isEmpty))",
                    "            .map(converter)",
                    "            .orElseGet(() -> {",
                    "                if (optional) {",
                    "                    return defaultValue;",
                    "                } else {",
                    "                    throw new IllegalStateException(\"Environment variable \" + var + \" is not set or empty\");",
                    "                }",
                    "            });",
                    "    }",
                    "",
                    "    @SneakyThrows",
                    "    private static boolean parseBoolean(String string) {",
                    "        return Boolean.parseBoolean(string) || \"1\".equals(string);",
                    "    }",
                    "",
                    "    @SneakyThrows",
                    "    private static URL parseUrl(String string) {",
                    "        return new URL(string);",
                    "    }",
                    "",
                ]
                    + GITHUB_ACTIONS_ENV_VARS.collect { envVar ->
                    String converter = "identity()"
                    String defaultValue = "null"
                    if (envVar.optionalType == Boolean) {
                        converter = "${classSimpleName}::parseBoolean"
                        defaultValue = "false"
                    } else if (envVar.optionalType == Integer) {
                        converter = "Integer::parseInt"
                    } else if (envVar.optionalType == Long) {
                        converter = "Long::parseLong"
                    } else if (envVar.optionalType == Path) {
                        converter = "Paths::get"
                    } else if (envVar.optionalType == URL) {
                        converter = "${classSimpleName}::parseUrl"
                    }
                    [
                        "",
                        "    /**",
                        "     * ${envVar.getDescHtml().replace('\n', '\n     * ')}",
                        "     */",
                        envVar.optional && defaultValue == "null" ? "    @Nullable" : null,
                        "    public static final ${envVar.type.name.replaceFirst(/^java\.lang\./, '')} ${envVar.name} = getEnv(\"${envVar.name}\", ${converter}, ${envVar.optional}, ${defaultValue});",
                    ]
                }.flatten().findAll { it != null }
                    + [
                    "",
                    "}",
                    "",
                ]
            ).join('\n'), 'UTF-8'
        )
    }
}

tasks.named('compileJava') { dependsOn(generateEnvironmentClass) }
